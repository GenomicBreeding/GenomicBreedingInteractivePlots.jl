var documenterSearchIndex = {"docs":
[{"location":"#GenomicBreedingInteractivePlots","page":"Home","title":"GenomicBreedingInteractivePlots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GenomicBreedingInteractivePlots.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#GenomicBreedingInteractivePlots.addpc1pc2-Tuple{DataFrames.DataFrame}","page":"Home","title":"GenomicBreedingInteractivePlots.addpc1pc2","text":"addpc1pc2(df::DataFrame)::DataFrame\n\nCompute and append the first two principal components (PC1 and PC2) of the phenotype data\n\nThis function performs Principal Component Analysis (PCA) on the trait columns of the input DataFrame (assumed to start from column 4 onwards). The traits are standardized before PCA is performed.\n\nArguments\n\ndf::DataFrame: Input DataFrame with trait columns starting from column 4\n\nReturns\n\nDataFrame: Original DataFrame with two additional columns:\npc1: First principal component scores\npc2: Second principal component scores\n\nNotes\n\nIf there are 2 or fewer traits, a warning is issued and the original DataFrame is returned unchanged\nTraits with no variation are removed before PCA\nThe trait data is standardized (centered and scaled) before PCA\nMissing, infinite, or NaN values in variance are handled\n\nExamples\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.figurelayout-Tuple{DataFrames.DataFrame}","page":"Home","title":"GenomicBreedingInteractivePlots.figurelayout","text":"figurelayout(df::DataFrame; height::Int64=1_200, width::Int64=800, traits::Vector{String})\n-> Tuple{Figure,GridLayout,Axis,Axis,Axis,Axis,Observable{String},String,String,Menu,Menu,Textbox,Textbox}\n\nCreate an interactive figure layout for visualizing trait relationships in a DataFrame.\n\nArguments\n\ndf::DataFrame: Input DataFrame containing trait data\nheight::Int64=1_200: Height of the figure in pixels\nwidth::Int64=800: Width of the figure in pixels  \ntraits::Vector{String}: Vector of trait names to be visualized\n\nReturns\n\nTuple containing:\n\nFigure: Main figure object\nGridLayout: Layout for the main scatter plot and histograms\nAxis: Histogram axis for trait 1\nAxis: Scatter plot axis\nAxis: Histogram axis for trait 2  \nAxis: Heatmap axis for trait correlations\nObservable{String}: Observable containing Pearson correlation value\nString: Default trait 1 name\nString: Default trait 2 name\nMenu: Dropdown menu for selecting trait 1\nMenu: Dropdown menu for selecting trait 2\nTextbox: Search box for trait 1\nTextbox: Search box for trait 2\n\nThe function creates an interactive visualization layout with:\n\nA scatter plot showing relationship between two selected traits\nMarginal histograms for each trait\nA heatmap showing correlations between all traits\nInteractive menus to select traits\nSearch boxes to find traits\nDisplay of Pearson correlation between selected traits\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.filterphenomesdata-Tuple{DataFrames.DataFrame}","page":"Home","title":"GenomicBreedingInteractivePlots.filterphenomesdata","text":"filterphenomesdata(df::DataFrame; \n    threshold_n::Union{Nothing,Int64} = nothing,\n    threshold_t::Union{Nothing,Int64} = nothing,\n    prioritise_entries::Bool = true,\n    impute::Bool = false)::DataFrame\n\nFilter and process phenome data from a DataFrame by handling missing values through either removal or imputation.\n\nArguments\n\ndf::DataFrame: Input DataFrame containing phenomes data with entries in rows and traits in columns (from column 4 onwards)\nthreshold_n::Union{Nothing,Int64}: Minimum number of entries required in the filtered dataset\nthreshold_t::Union{Nothing,Int64}: Minimum number of traits required in the filtered dataset\nprioritise_entries::Bool: If true, prioritizes keeping entries over traits when removing sparse data\nimpute::Bool: If true, performs mean value imputation instead of removing sparse data\n\nReturns\n\nDataFrame: Filtered and processed DataFrame\n\nDetails\n\nWhen impute=false:\n\nIteratively removes sparsest rows or columns until no missing data remains or no data is left\nThrows ArgumentError if resulting data doesn't meet threshold requirements\n\nWhen impute=true:\n\nRemoves sparsest rows and columns until meeting threshold requirements\nPerforms mean value imputation for remaining missing values\nDisplays histograms of sparsity distribution\n\nThrows\n\nArgumentError: If resulting data is too sparse or doesn't meet threshold requirements when impute=false\n\nNote\n\nThe input DataFrame should have entry information in the first three columns and traits data from column 4 onwards.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.heatmapinteractive!-Tuple{Makie.Axis}","page":"Home","title":"GenomicBreedingInteractivePlots.heatmapinteractive!","text":"heatmapinteractive!(plot_heatmap::Axis; df::DataFrame, traits::Vector{String})\n\nCreates an interactive correlation heatmap for the specified traits using GLMakie.\n\nArguments\n\nplot_heatmap::Axis: The axis object where the heatmap will be plotted\ndf::DataFrame: DataFrame containing the data for correlation analysis\ntraits::Vector{String}: Vector of trait names to be included in the correlation analysis\n\nDetails\n\nCalculates correlation matrix for specified traits from the DataFrame\nReverses column order for display purposes\nCreates interactive heatmap with correlation values ranging from -1 to 1\nIncludes inspector label showing correlation coefficient and trait pairs on hover\n\nReturns\n\nNothing, modifies the plot in-place.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.loadphenomesdata-Tuple{GenomicBreedingCore.Phenomes}","page":"Home","title":"GenomicBreedingInteractivePlots.loadphenomesdata","text":"loadphenomesdata(phenomes::Phenomes; \n                 idx_entries::Union{Nothing,Vector{Int64}} = nothing,\n                 idx_traits::Union{Nothing,Vector{Int64}} = nothing, \n                 threshold_n::Union{Nothing,Int64} = nothing,\n                 threshold_t::Union{Nothing,Int64} = nothing\n                )::Tuple{DataFrame,Vector{String},Int64,Int64}\n\nLoad and process phenotypic data from a Phenomes struct into a tabular format.\n\nArguments\n\nphenomes::Phenomes: A Phenomes struct containing phenotypic data\nidx_entries::Union{Nothing,Vector{Int64}}=nothing: Optional vector of indices to select specific entries\nidx_traits::Union{Nothing,Vector{Int64}}=nothing: Optional vector of indices to select specific traits\nthreshold_n::Union{Nothing,Int64}=nothing: Minimum number of entries to retain (defaults to 50% of entries)\nthreshold_t::Union{Nothing,Int64}=nothing: Minimum number of traits to retain (defaults to 50% of traits or 1)\n\nReturns\n\nA tuple containing:\n\nDataFrame: Tabularized phenotypic data\nVector{String}: Sorted unique trait names\nInt64: Final threshold value for number of entries\nInt64: Final threshold value for number of traits\n\nThrows\n\nArgumentError: If phenomes struct is corrupted\nArgumentError: If idx_entries are out of bounds\nArgumentError: If idx_traits are out of bounds\nArgumentError: If threshold_n is out of bounds\nArgumentError: If threshold_t is out of bounds\nArgumentError: If any population has less than 2 entries\n\nExample\n\njulia> phenomes = Phenomes(n = 100, t = 3);\n\njulia> phenomes.entries = string.(\"entry_\", 1:100);\n\njulia> phenomes.populations = StatsBase.sample(string.(\"pop_\", 1:5), 100, replace = true);\n\njulia> phenomes.traits = [\"trait_1\", \"trait_2\", \"long_trait_name number 3\"];\n\njulia> phenomes.phenotypes = rand(Distributions.MvNormal([1, 2, 3], LinearAlgebra.I), 100)';\n\njulia> n_missing = 20;\n\njulia> phenomes.phenotypes[sample(1:length(phenomes.entries), n_missing, replace=true), sample(1:length(phenomes.traits), n_missing, replace=true)] .= missing;\n\njulia> (df, traits, threshold_n, threshold_t) = loadphenomesdata(phenomes);\n\njulia> size(df)\n(100, 6)\n\njulia> length(traits)\n3\n\njulia> (threshold_n, threshold_t)\n(50, 1)\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.plotinteractive2d-Tuple{GenomicBreedingCore.Phenomes}","page":"Home","title":"GenomicBreedingInteractivePlots.plotinteractive2d","text":"plotinteractive2d(phenomes::Phenomes; \n    idx_entries::Union{Nothing,Vector{Int64}} = nothing,\n    idx_traits::Union{Nothing,Vector{Int64}} = nothing,\n    threshold_n::Union{Nothing,Int64} = nothing,\n    threshold_t::Union{Nothing,Int64} = nothing,\n    prioritise_entries::Bool = true,\n    impute::Bool = false\n)::Figure\n\nCreates an interactive 2D visualization of phenotypic data with the following components:\n\nA scatter plot of two selected traits\nMarginal histograms for both traits\nA correlation heatmap of all traits\n\nArguments\n\nphenomes::Phenomes: A Phenomes object containing the phenotypic data\nidx_entries::Union{Nothing,Vector{Int64}}: Optional indices to subset entries\nidx_traits::Union{Nothing,Vector{Int64}}: Optional indices to subset traits\nthreshold_n::Union{Nothing,Int64}: Minimum number of non-missing values per entry\nthreshold_t::Union{Nothing,Int64}: Minimum number of non-missing values per trait\nprioritise_entries::Bool: If true, prioritizes keeping entries over traits when filtering\nimpute::Bool: If true, performs imputation on missing values\n\nReturns\n\nFigure: A Makie figure object containing the interactive visualization\n\nFeatures\n\nInteractive trait selection via dropdown menus\nSearch functionality for traits\nData inspection on hover\nAutomatic correlation calculation\nPrincipal component analysis visualization\nResponsive layout with linked histograms and scatter plot\n\nNotes\n\nUses GLMakie as the backend\nAutomatically handles missing data through filtering and optional imputation\nIncludes first two principal components in the trait selection options\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.removesparsestroworcol-Tuple{DataFrames.DataFrame}","page":"Home","title":"GenomicBreedingInteractivePlots.removesparsestroworcol","text":"removesparsestroworcol(df::DataFrame; prioritise_entries::Bool = true)::DataFrame\n\nRemove either the sparsest row or column from a DataFrame based on sparsity values.\n\nArguments\n\ndf::DataFrame: Input DataFrame to process\nprioritise_entries::Bool = true: If true, prioritizes removing sparse columns (loci-alleles). If false, prioritizes removing sparse rows (entries).\n\nReturns\n\nDataFrame: A new DataFrame with the sparsest row or column removed. If no sparsity is found (all values are 0.0), returns the original DataFrame unchanged.\n\nDetails\n\nThe function calculates sparsity for each row or column (depending on prioritise_entries), and removes the one with the highest sparsity value. Sparsity is computed as the mean of sparsity values across the respective dimension.\n\nExample\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.scatterplotinteractive!-Tuple{Observables.Observable, Observables.Observable, Observables.Observable, Makie.Axis, Makie.Axis, Makie.Axis}","page":"Home","title":"GenomicBreedingInteractivePlots.scatterplotinteractive!","text":"scatterplotinteractive!(X::Observable, Y::Observable, ρ::Observable, plot_scatter::Axis, \n                       plot_hist_x::Axis, plot_hist_y::Axis; df::DataFrame, traits::Vector{String})\n\nCreate an interactive scatter plot with marginal histograms for multiple populations.\n\nArguments\n\nX::Observable: Observable containing x-axis (trait 1) data\nY::Observable: Observable containing y-axis (trait 2) data\nρ::Observable: Observable for Pearson's correlation coefficient for x and y traits to display\nplot_scatter::Axis: Main scatter plot axis\nplot_hist_x::Axis: X-axis marginal histogram axis\nplot_hist_y::Axis: Y-axis marginal histogram axis\ndf::DataFrame: DataFrame containing the data with required columns:\npopulations: Population identifiers\nentries: Entry labels\ntraits::Vector{String}: Vector of trait names for formatting\n\nDetails\n\nCreates a scatter plot with population-specific colours and interactive labels. Includes marginal histograms for both x and y dimensions. Updates correlation coefficient dynamically.\n\nReturns\n\nNothing, modifies the input axes in place.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreedingInteractivePlots.sparsity-Tuple{DataFrames.DataFrame}","page":"Home","title":"GenomicBreedingInteractivePlots.sparsity","text":"sparsity(df::DataFrame)::Matrix{Float64}\n\nCalculate the sparsity pattern of a DataFrame's numerical columns.\n\nTakes a DataFrame and returns a boolean matrix where:\n\ntrue indicates missing, NaN, or infinite values\nfalse indicates valid numerical values\n\nThe function considers only columns from the 4th column onwards.\n\nArguments\n\ndf::DataFrame: Input DataFrame to analyze\n\nReturns\n\nMatrix{Float64}: A boolean matrix where true represents missing/invalid data points\n\nExamples\n\n\n\n\n\n","category":"method"}]
}
